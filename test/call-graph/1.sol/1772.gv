digraph "" {
	graph [bb="0,0,2218.1,124.8"];
	node [label="\N"];
	"AnyswapImplL1.bridgeERC20To(uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address \
wrapperTokenAddress)"	 [height=0.5,
		pos="1050,106.8",
		width=17.73];
	"SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)"	 [height=0.5,
		pos="369.03,18",
		width=10.251];
	"AnyswapImplL1.bridgeERC20To(uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address \
wrapperTokenAddress)" -> "SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)" [key=call,
	label=" call",
	lp="782.88,62.4",
	pos="e,498.51,34.885 915.08,89.203 797.52,73.874 627.73,51.734 508.78,36.224"];
"SafeTransferLib.safeApprove(ERC20 token, address to, uint256 amount)" [height=0.5,
	pos="1050,18",
	width=8.1727];
"AnyswapImplL1.bridgeERC20To(uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address \
wrapperTokenAddress)" -> "SafeTransferLib.safeApprove(ERC20 token, address to, uint256 amount)" [key=call,
label=" call",
lp="1061.9,62.4",
pos="e,1050,36.072 1050,88.401 1050,76.295 1050,60.208 1050,46.467"];
"AnyswapV4Router.anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID)" [height=0.5,
pos="1790,18",
width=11.891];
"AnyswapImplL1.bridgeERC20To(uint256 amount, uint256 toChainId, bytes32 metadata, address receiverAddress, address token, address \
wrapperTokenAddress)" -> "AnyswapV4Router.anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID)" [key=call,
label=" call",
lp="1498.9,62.4",
pos="e,1648.2,35.017 1196.2,89.256 1324,73.923 1508.8,51.746 1638.2,36.217"];
}
