digraph "" {
	graph [bb="0,0,2379.7,124.8"];
	node [label="\N"];
	"HopImplL2.bridgeERC20To(address receiverAddress, address token, address hopAMM, uint256 amount, uint256 toChainId, HopBridgeRequestData \
calldata hopBridgeRequestData)"	 [height=0.5,
		pos="968.03,106.8",
		width=19.973];
	"SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)"	 [height=0.5,
		pos="369.03,18",
		width=10.251];
	"HopImplL2.bridgeERC20To(address receiverAddress, address token, address hopAMM, uint256 amount, uint256 toChainId, HopBridgeRequestData \
calldata hopBridgeRequestData)" -> "SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)" [key=call,
	label=" call",
	lp="734.88,62.4",
	pos="e,484.52,35.122 848.25,89.043 745.72,73.844 598.6,52.033 494.46,36.596"];
"HopAMM.swapAndSend(uint256 chainId, address recipient, uint256 amount, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, \
uint256 destinationAmountOutMin, uint256 destinationDeadline)" [height=0.5,
	pos="1568,18",
	width=22.545];
"HopImplL2.bridgeERC20To(address receiverAddress, address token, address hopAMM, uint256 amount, uint256 toChainId, HopBridgeRequestData \
calldata hopBridgeRequestData)" -> "HopAMM.swapAndSend(uint256 chainId, address recipient, uint256 amount, uint256 bonderFee, uint256 amountOutMin, uint256 deadline, \
uint256 destinationAmountOutMin, uint256 destinationDeadline)" [key=call,
label=" call",
lp="1333.9,62.4",
pos="e,1447.7,35.802 1088,89.043 1189.2,74.064 1333.8,52.665 1437.8,37.272"];
}
