digraph "" {
	graph [bb="0,0,2004.6,124.8"];
	node [label="\N"];
	"HopImplL1.bridgeERC20To(address receiverAddress, address token, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 \
amount, uint256 amountOutMin, uint256 relayerFee, HopERC20Data calldata hopData)"	 [height=0.5,
		pos="882.87,106.8",
		width=24.524];
	"SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)"	 [height=0.5,
		pos="379.87,18",
		width=10.251];
	"HopImplL1.bridgeERC20To(address receiverAddress, address token, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 \
amount, uint256 amountOutMin, uint256 relayerFee, HopERC20Data calldata hopData)" -> "SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)" [key=call,
	label=" call",
	lp="688.73,62.4",
	pos="e,478.21,35.36 781.39,88.883 696.28,73.858 575.05,52.457 488.1,37.107"];
"IHopL1Bridge.sendToL2(uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, \
uint256 relayerFee)" [height=0.5,
	pos="1385.9,18",
	width=17.187];
"HopImplL1.bridgeERC20To(address receiverAddress, address token, address l1bridgeAddr, address relayer, uint256 toChainId, uint256 \
amount, uint256 amountOutMin, uint256 relayerFee, HopERC20Data calldata hopData)" -> "IHopL1Bridge.sendToL2(uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, \
uint256 relayerFee)" [key=call,
label=" call",
lp="1191.7,62.4",
pos="e,1285,35.813 984.36,88.883 1068.6,74.005 1188.3,52.873 1275.1,37.557"];
}
