digraph "" {
	graph [bb="0,0,2523.8,124.8"];
	node [label="\N"];
	"CelerImpl.bridgeERC20To(address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, \
uint32 maxSlippage)"	 [height=0.5,
		pos="1145.2,106.8",
		width=17.232];
	"ICelerStorageWrapper.setAddressForTransferId(bytes32 transferId, address transferIdAddress)"	 [height=0.5,
		pos="379.15,18",
		width=10.532];
	"CelerImpl.bridgeERC20To(address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, \
uint32 maxSlippage)" -> "ICelerStorageWrapper.setAddressForTransferId(bytes32 transferId, address transferIdAddress)" [key=call,
	label=" call",
	lp="843.01,62.4",
	pos="e,522.9,34.664 994.27,89.309 860.86,73.843 667.12,51.383 532.87,35.819"];
"SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)" [height=0.5,
	pos="1145.2,18",
	width=10.251];
"CelerImpl.bridgeERC20To(address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, \
uint32 maxSlippage)" -> "SafeTransferLib.safeTransferFrom(ERC20 token, address from, address to, uint256 amount)" [key=call,
label=" call",
lp="1157,62.4",
pos="e,1145.2,36.072 1145.2,88.401 1145.2,76.295 1145.2,60.208 1145.2,46.467"];
"ICBridge.send(address _receiver, address _token, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage)" [height=0.5,
pos="2028.2,18",
width=13.769];
"CelerImpl.bridgeERC20To(address receiverAddress, address token, uint256 amount, bytes32 metadata, uint64 toChainId, uint64 nonce, \
uint32 maxSlippage)" -> "ICBridge.send(address _receiver, address _token, uint256 _amount, uint64 _dstChinId, uint64 _nonce, uint32 _maxSlippage)" [key=call,
label=" call",
lp="1678,62.4",
pos="e,1859.5,34.96 1317.2,89.494 1470.6,74.075 1694.1,51.598 1849.4,35.978"];
}
